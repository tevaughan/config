#!/bin/bash
#
# vim: set tw=79 sw=2:
#
# Script to enable different wallpapers on each workspace and monitor with
# Openbox.
#
# Written  by damo              <damo@bunsenlabs.org>   2015 Nov.
# Modified by Thomas E. Vaughan <tevaughan@gmail.com>   2018 Feb.
#
# When first run, the script writes a configuration file template. The user can
# then edit this and add the image filepaths.
#
# To run while logged in, add "wallpapersd &" to your autostart.
#
# REQUIRES: feh, imagemagick
#
# SUGGESTED DEBIAN PACKAGES (FOR IMAGES):
#   gnome-backgrounds
#   mate-backgrounds
#   mate-screensaver-common
#
# SEE ALSO:
#   $HOME/.config/openbox/autostart       (which launches wallpapersd)
#   $HOME/.config/openbox/wallpapers.cfg  (which wallpapersd reads or writes)
###############################################################################

WALLS_FILE="$HOME/.config/openbox/wallpapers.cfg"

# Edit this, or wallpapers.cfg, to use a different feh command.
FEH_CMD="feh --bg-tile"

TXT="
##############################################################################
#
# Add filepath for each image to be set as background on workspace.
#
# Commands should be in the form:
#
# feh --bg-tile 'image-basename'
#
# where the basename (without directory path) is used.  A set of standard image
# directories is searched for the image file.
#
# See the description of '--bg-*' options in the man page for feh.
#
# Note that --bg-tile is an option for a multi-monitor setup with a single
# background spread across all monitors, but the image must be big enough to
# cover them.
#
##############################################################################"

USAGE="USAGE:

wallpapersd &   Runs the 'daemon' to set per-workspace backgrounds.
First run will open wallpapers.cfg, which has instructions
and feh settings.

--config        Open wallpapers.cfg for editing

-h,--help       This help
"

if ! hash feh; then
  echo "feh is required to set the backgrounds."
  echo "Install the feh package then re-run the script."
  exit 1
fi

case "$1" in
  -h|--help ) echo -e "\n$USAGE"
    exit
    ;;
  --config  ) if [[ -f $WALLS_FILE ]] &>/dev/null;then
    echo -e "\n  Open wallpapers.cfg for editing?"
    echo -e " (wallpapersd needs restart afterward) y|N"
    read -srn1 RET
    case $RET in
      n|N ) exit;;
      y|Y ) xdg-open "$WALLS_FILE" &
        # open cfg file for editing
        killall wallpapersd
        exit
        ;;
      *   ) exit
        ;;
    esac
  else
    echo -e " '$WALLS_FILE' not found"
    echo -e " Run wallpapersd first? Y|n?"
    read -srn1 ANS
    case $ANS in
      n|N ) exit
        ;;
      *   ) wallpapersd 2>/dev/null &
        # run app to generate cfg template
        xdg-open "$WALLS_FILE" &
        # open cfg file for editing
        ;;
    esac
  fi
  ;;
esac

# Look for wallpapers in standard places.  Terminal slash is required in case
# the listed place be a logical link to the real place.
img_dirs=(
  "$HOME/Pictures/"
  "$HOME/.config/openbox/"
  /usr/share/wallpapers/
  /usr/share/backgrounds/
)

function file_image_matches()
{
  file=$1
  if [ -r "$file" ] && ! [ -d "$file" ]; then
    # file contains absolute pathname.
    echo $file
    return
  fi
  for i in ${!img_dirs[*]}; do
    dir="${img_dirs[$i]}"
    if [ -d "$dir" ]; then
      find "$dir" -name "$file"
    fi
  done
}

function image_at_index()
{
  image_index=$1
  for i in ${!img_dirs[*]}; do
    dir="${img_dirs[$i]}"
    if [ -d "$dir" ]; then
      find "$dir" -iname '*.jpg'
      find "$dir" -iname '*.png'
    fi
  done\
    | head -n $image_index\
    | tail -n -1
}

function screen_size()
{
  xrandr\
    | grep '^Screen 0: minimum'\
    | awk -F, '{print $2}'\
    | sed 's/ current //'\
    | sed 's/ x /x/'
}

if [[ ! -f $WALLS_FILE ]]; then
  echo -e "$TXT\n" > "$WALLS_FILE"
  NUM_DESKTOPS=$(xprop -root _NET_NUMBER_OF_DESKTOPS)
  NUM_DESKTOPS=${NUM_DESKTOPS:(-1)}
  for (( i=0; i < $NUM_DESKTOPS; i++ )); do
    echo "[DESKTOP_$i] $FEH_CMD " >> "$WALLS_FILE"
  done
  # Open cfg file for editing.  Script must be restarted afterwards.
  xdg-open "$WALLS_FILE"
  exit
else
  image_index=1
  xev -root -event property |  # <-- this is the watching process
    while IFS=$',' read -a W; do
      if [[ "${W[0]}" =~ '_NET_CURRENT_DESKTOP' ]]; then
        CURR_DESKTOP=$(xprop -root _NET_CURRENT_DESKTOP)
        CURR_DESKTOP=${CURR_DESKTOP:(-1)}
        while read DTOP FEH OPT FILE; do
          VAL="[DESKTOP_$CURR_DESKTOP]"
          if [[ "$DTOP" = "$VAL" ]]; then
            FILE=$(eval echo $FILE)  # Remove any quote marks.
            resized="/tmp/resized-$FILE"
            if ! [ -r "$resized" ]; then
              file=$(file_image_matches "$FILE" | head -n -1)
              # By checking only here (after the 'if' above) for the existence
              # of file, and by using the name in the config file in the
              # resized variable, even though we might use a different file, we
              # can keep from incrementing through the files in the path every
              # time the desktop changes.
              if ! [ -r "$file" ]; then
                echo "file '$file' to resize does not exist"
                # No image matching the name in 'wallpapers.cfg' found.  Pick a
                # sequential image from the path.
                file=$(image_at_index $image_index)
                echo "'image_at_index $image_index' returned '$file'"
                ((image_index++))
              fi
              if [ -r "$file" ]; then
                # The terminal '^' on the size causes the aspect ratio to be
                # preserved while the image is grown just enough completely to
                # fill the requested size.
                convert "$file" -resize "$(screen_size)^" $resized
              else
                echo "no readable file '$file' exists to resize"
              fi
            fi
            if [ -r "$resized" ]; then
              eval "$FEH $OPT '$resized'"
            else
              echo "no readable resized file '$resized'"
            fi
          fi
        done < "$WALLS_FILE"
      fi
      W=()
    done  
fi

